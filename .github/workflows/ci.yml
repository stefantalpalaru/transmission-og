name: CI
on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  build:
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        target:
          - os: linux
            cpu: amd64
          - os: linux
            cpu: i386
          - os: macos
            cpu: amd64
          - os: windows
            cpu: amd64
        include:
          - target:
              os: linux
            builder: ubuntu-20.04
            shell: bash
          - target:
              os: macos
            builder: macos-latest
            shell: bash
          - target:
              os: windows
            builder: windows-2019
            shell: msys2 {0}

    defaults:
      run:
        shell: ${{ matrix.shell }}

    name: '${{ matrix.target.os }}-${{ matrix.target.cpu }}'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Install build dependencies (Linux i386)
        if: runner.os == 'Linux' && matrix.target.cpu == 'i386'
        run: |
          sudo -E dpkg --add-architecture i386
          sudo -E apt-get update -qq
          sudo -E apt-get install --no-install-recommends -yq gcc-multilib \
            build-essential:i386 libcurl4-openssl-dev:i386 gettext:i386 \
            libevent-dev:i386 libglib2.0-dev:i386 libgtk-3-dev:i386 \
            libnotify-dev:i386 libssl-dev:i386 libsystemd-dev:i386 \
            qtbase5-dev:i386 zlib1g-dev:i386
          mkdir -p external/bin
          cat << EOF > external/bin/gcc
          #!/bin/bash
          exec $(which gcc) -m32 -mno-adx "\$@"
          EOF
          cat << EOF > external/bin/g++
          #!/bin/bash
          exec $(which g++) -m32 -mno-adx "\$@"
          EOF
          chmod 755 external/bin/gcc external/bin/g++
          echo "${{ github.workspace }}/external/bin" >> $GITHUB_PATH

      - name: Install build dependencies (Linux AMD64)
        if: runner.os == 'Linux' && matrix.target.cpu == 'amd64'
        run: |
          sudo -E apt-get update -qq
          sudo -E apt-get install --no-install-recommends -yq \
            build-essential libayatana-appindicator3-dev libcurl4-openssl-dev \
            libevent-dev libglib2.0-dev libgtk-3-dev libminiupnpc-dev \
            libnatpmp-dev libnotify-dev libssl-dev libsystemd-dev \
            qtbase5-dev zlib1g-dev gettext

      - name: Select the Xcode version
        if: runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '13' # 14 seems buggy: https://github.com/actions/runner-images/issues/6642

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake gettext pkg-config libevent openssl

      - name: MSYS2 (Windows amd64)
        if: runner.os == 'Windows' && matrix.target.cpu == 'amd64'
        uses: msys2/setup-msys2@v2
        with:
          path-type: inherit
          install: >-
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-libevent
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-gtk3
            mingw-w64-x86_64-miniupnpc
            mingw-w64-x86_64-libnatpmp
            mingw-w64-x86_64-libnotify
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-qt5-base
            mingw-w64-x86_64-gettext

      - name: Environment variables
        run: |
          echo "CFLAGS=-O3 -march=native -pipe" >> $GITHUB_ENV
          echo "CXXFLAGS=-O3 -march=native -pipe" >> $GITHUB_ENV
          NCPU=""
          MAKE_CMD="make"
          case "${{ runner.os }}" in
          "Linux")
            NCPU="$(nproc)"
            echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
            echo "TZ=Etc/UTC" >> $GITHUB_ENV
            ;;
          "macOS")
            NCPU="$(sysctl -n hw.logicalcpu)"
            ;;
          "Windows")
            NCPU="${NUMBER_OF_PROCESSORS}"
            MAKE_CMD="mingw32-make"
            ;;
          esac
          [[ -z "${NCPU}" || ${NCPU} -le 0 ]] && NCPU="1"
          echo "NCPU=${NCPU}" >> $GITHUB_ENV
          echo "MAKE_CMD=${MAKE_CMD}" >> $GITHUB_ENV

      - name: Build binaries and run tests
        run: |
          mkdir build
          cd build
          if [[ '${{ runner.os }}' == 'Windows' ]]; then
            cmake -G "MinGW Makefiles" ..
          else
            cmake ..
          fi
          ${MAKE_CMD} -j${NCPU}
          ${MAKE_CMD} test
